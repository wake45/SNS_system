<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>프로필 페이지</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gradient-to-b from-slate-800 to-slate-600 text-white min-h-screen p-4">

  <div class="max-w-3xl mx-auto bg-white text-black rounded-xl shadow-lg p-6">
    <!-- 프로필 영역 -->
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-4">
        <img
          src="{{user.profile.profile_picture}}"
          alt="프로필 사진"
          class="w-20 h-20 rounded-full border-2 border-blue-400 {{#if isMyPage}}cursor-pointer{{else}}cursor-default{{/if}}"
          {{#if isMyPage}}onclick="handleProfileClick()"{{/if}}
          id="profileImage"
        />
        {{#if isMyPage}}
          <input type="file" id="fileInput" accept="image/*" style="display: none;" onchange="handleFileChange(event)">
        {{/if}}
        <input type="hidden" id="userId" value="{{user._id}}">
        <div>
          <h2 class="text-xl font-semibold">{{user.profile.name}}</h2>
          <p class="text-gray-600">{{user.profile.bio}}</p>
          <div class="flex gap-4 mt-1">
            <button onclick="handleFollowerClick()" class="text-blue-500 hover:underline">
              팔로워: <span id="followerCount">{{user.followers.length}}</span>명
            </button>
            <button onclick="handleFollowingClick()" class="text-blue-500 hover:underline">
              팔로잉: <span id="followingCount">{{user.following.length}}</span>명
            </button>
          </div>
        </div>
      </div>
      <!-- 본인 계정일 경우 로그아웃 버튼, 다른 계정일 경우 채팅 버튼 -->
      <div>
        <button class="px-4 py-2 bg-gray-300 rounded-md hover:bg-gray-400" onclick="goHome()">홈화면</button>
        {{#if isMyPage}}
          <button class="px-4 py-2 bg-gray-300 rounded-md hover:bg-gray-400" onclick="logout()">로그아웃</button>
        {{else}}
          <button class="px-4 py-2 bg-gray-300 rounded-md hover:bg-gray-400" onclick="startChat()">채팅</button>
        {{/if}}
      </div>
    </div>

    <!-- 피드 섹션 -->
    <div class="grid grid-cols-3 gap-4 mt-6">
      <!-- 피드 항목은 동적으로 생성될 수 있습니다 -->
    </div>

    <!-- 글쓰기 / 팔로우 버튼 -->
    <div class="mt-6">
      <button id="writeOrFollowButton" class="w-full py-3 bg-gray-300 rounded-md hover:bg-gray-400" onclick="{{#if isMyPage}}writePost(){{else}}handleFollow(){{/if}}">
        {{#if isMyPage}}글쓰기{{else}}팔로우하기{{/if}}
      </button>
    </div>
  </div>

  <!-- 모달 구조 -->
  <div id="modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full" style="display: none;">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
      <div class="mt-3 text-center">
        <h3 id="modalTitle" class="text-lg leading-6 font-medium text-gray-900"></h3>
        <div id="modalContent" class="mt-2 px-7 py-3" style="color: black;">
          <!-- 팔로워 또는 팔로잉 목록이 여기에 삽입됩니다 -->
        </div>
        <div class="items-center px-4 py-3">
          <button id="closeModal" class="px-4 py-2 bg-blue-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300">
            닫기
          </button>
        </div>
      </div>
    </div>
  </div>

  <script>
    // 모달 요소 가져오기
    const modal = document.getElementById('modal');
    const modalTitle = document.getElementById('modalTitle');
    const modalContent = document.getElementById('modalContent');

    // 모달 닫기 버튼 설정
    const closeModal = document.getElementById('closeModal');
    closeModal.onclick = function() {
      modal.style.display = 'none';
    }


    // 프로필 이미지를 클릭했을 때 파일 선택 창 열기
    function handleProfileClick() {
      document.getElementById('fileInput').click();
    }

    // 프로필 이미지 변경
    function handleFileChange(event) {
      const file = event.target.files[0];
      const userId = document.getElementById('userId').value; // 사용자 ID를 가져옵니다.

      if (file) {
        if (!file.type.startsWith('image/')) {
          alert('이미지 파일을 선택해주세요.');
          return;
        }

        const reader = new FileReader();
        reader.onload = function(e) {
          document.getElementById('profileImage').src = e.target.result;
        };
        reader.readAsDataURL(file);

        // 서버로 이미지와 사용자 ID를 함께 업로드 요청
        const formData = new FormData();
        formData.append('profileImage', file);
        formData.append('userId', userId);

        fetch('/user/upload', {
          method: 'POST',
          body: formData,
        })
        .then(response => response.json())
        .then(data => {
          console.log('서버 응답:', data);
          // 서버에서 반환한 이미지 URL을 프로필 이미지로 설정
          document.getElementById('profileImage').src = data.imageUrl;
        })
        .catch(error => {
          console.error('업로드 실패:', error);
        });
      }
    }

    // 팔로워 버튼 클릭 시 호출되는 함수
    function handleFollowerClick(followerIds) {
      fetch('/user/get-usernames', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userIds: followerIds }),
      })
        .then(response => response.json())
        .then(data => {
          if (Array.isArray(data)) {
            if (data.usernames.length === 0) {
              displayModal('팔로워 목록', '팔로워가 없습니다.');
            } else {
              const content = data.usernames.map(username => `<p>${username}</p>`).join('');
              displayModal('팔로워 목록', content);
            }
          }
          else {
            displayModal('팔로워 목록', '팔로워가 없습니다.');
          }
        })
        .catch(error => console.error('팔로워 목록을 불러오는 중 오류 발생:', error));
    }

    // 팔로잉 버튼 클릭 시 호출되는 함수
    function handleFollowingClick(followingIds) {
      fetch('/user/get-usernames', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userIds: followingIds }),
      })
        .then(response => response.json())
        .then(data => {
          if (Array.isArray(data)) {
            if (data.usernames.length === 0) {
              displayModal('팔로잉 목록', '팔로잉하는 사용자가 없습니다.');
            } else {
              const content = data.usernames.map(username => `<p>${username}</p>`).join('');
              displayModal('팔로잉 목록', content);
            }
          } else {
            displayModal('팔로잉 목록', '팔로잉하는 사용자가 없습니다.');
          }
        })
        .catch(error => console.error('팔로잉 목록을 불러오는 중 오류 발생:', error));
    }

    // 모달 창에 데이터 표시
    function displayModal(title, content) {
      const modalTitle = document.getElementById('modalTitle');
      const modalContent = document.getElementById('modalContent');
      modalTitle.innerText = title;
      modalContent.innerHTML = content;
      const modal = document.getElementById('modal');
      modal.style.display = 'block';
    }

    function writePost() {
      alert("글쓰기 페이지로 이동");
    }

    function handleFollow() {
      alert("팔로우 기능 실행");
    }

    function startChat() {
      alert("채팅 시작");
    }

    function logout() {
      fetch('/auth/logout', {
        method: 'POST',
        credentials: 'same-origin' // 쿠키를 포함하여 요청을 보냅니다.
      })
      .then(response => {
        if (response.redirected) {
          window.location.href = response.url; // 리디렉션된 URL로 이동
        } else {
          alert('로그아웃에 실패했습니다.');
        }
      })
      .catch(error => {
        console.error('로그아웃 중 오류 발생:', error);
      });
    }
  </script>
</body>
</html>